<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRage</name>
    </assembly>
    <members>
        <member name="M:VRage.Audio.IMyAudio.ApplyEffect(VRage.Audio.IMySourceVoice,VRage.Utils.MyStringHash,VRage.Audio.MyCueId[],System.Nullable{System.Single},System.Boolean)">
            <summary>
            Creates effect on input emitter
            </summary>
            <param name="input">Emitter to work with</param>
            <param name="effect"></param>
            <param name="cueIds">additional cues if effect mixes them (ie. crossfade)</param>
            <returns>effect output sound</returns>
        </member>
        <member name="T:VRage.Data.Audio.MyCurveType">
            <summary>
            Enumerator of available curve types
            </summary>
        </member>
        <member name="M:System.BitCompressionExtensions.ReadQuaternionNormCompressed(VRage.Library.Collections.BitStream)">
            <summary>
            Serializes normalized quaternion into 29 bits
            </summary>
        </member>
        <member name="M:System.BitCompressionExtensions.WriteQuaternionNormCompressed(VRage.Library.Collections.BitStream,VRageMath.Quaternion)">
            <summary>
            Serializes normalized quaternion into 29 bits
            </summary>
        </member>
        <member name="M:System.BitCompressionExtensions.SerializeNormCompressed(VRage.Library.Collections.BitStream,VRageMath.Quaternion@)">
            <summary>
            Serializes normalized quaternion into 29 bits
            </summary>
        </member>
        <member name="M:System.BitCompressionExtensions.ReadQuaternionNormCompressedIdentity(VRage.Library.Collections.BitStream)">
            <summary>
            Serializes normalized quaternion into 1 or 30 bits
            </summary>
        </member>
        <member name="M:System.BitCompressionExtensions.WriteQuaternionNormCompressedIdentity(VRage.Library.Collections.BitStream,VRageMath.Quaternion)">
            <summary>
            Serializes normalized quaternion into 1 or 30 bits
            </summary>
        </member>
        <member name="M:System.BitCompressionExtensions.SerializeNormCompressedIdentity(VRage.Library.Collections.BitStream,VRageMath.Quaternion@)">
            <summary>
            Serializes normalized quaternion into 1 or 30 bits
            </summary>
        </member>
        <member name="T:VRage.GameServices.IMyMultiplayerGame">
            <summary>
            Common interface for MyGameServerItem and IMyLobby
            </summary>
        </member>
        <member name="T:VRage.Generics.IMyCondition">
            <summary>
            Interface of totally generic condition.
            </summary>
        </member>
        <member name="M:VRage.Generics.IMyCondition.Evaluate">
            <summary>
            Evaluate the condition, it can be true/false.
            </summary>
        </member>
        <member name="T:VRage.Generics.IMyVariableStorage`1">
            <summary>
            Interface of variable storage (key-value principle).
            </summary>
        </member>
        <member name="T:VRage.Generics.MyCachingDynamicObjectsPool`2">
            This class provides similar functionality to MyDynamicObjectsPool with the addition of caching facilities.
            
            The cache is intended to be used for objects that once allocated either perform expensive computations
            or allocate a lot of memory *and* that may be needed again after disposed in the same state.
        </member>
        <member name="M:VRage.Generics.MyCachingDynamicObjectsPool`2.Deallocate(`1)">
            Deallocate object without key.
            
            Object is disposed be callee.
        </member>
        <member name="M:VRage.Generics.MyCachingDynamicObjectsPool`2.Deallocate(`0,`1)">
            Deallocate object with key.
            
            Object is cached and disposed if necessary.
        </member>
        <member name="M:VRage.Generics.MyCachingDynamicObjectsPool`2.TryAllocateCached(`0,`1@)">
            Allocate an object that may be cached.
            
            Returns true if the object was found in the cache and false otherwise.
        </member>
        <member name="T:VRage.Generics.MyStateMachine">
            <summary>
            Implementation of generic multistate state machine. Is able to run multiple independent cursors
            at once updated with every update call. Use cursors as access point to active states.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachine.CreateCursor(System.String)">
            <summary>
            Creates new active cursor.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachine.SetState(System.Int32,System.String)">
            <summary>
            Set the current state. Warning - this is not a thing that you would like to normally do, 
            state machine should live its own life (based on transition condition).
            Returns true on success.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachine.Update">
            <summary>
            Update the state machine. Transition to new states.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachine.TriggerAction(VRage.Utils.MyStringId)">
            <summary>
            Trigger an action in this layer. 
            If there is a transition having given (non-null) name, it is followed immediatelly.
            Conditions of transition are ignored.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachine.SortTransitions">
            <summary>
            Sort the transitions between states according to their priorities.
            </summary>
        </member>
        <member name="T:VRage.Generics.MySingleStateMachine">
            <summary>
            Implementation of generic state machine. Inherit from this class to create your own state machine.
            Transitions are performed automatically on each update (if conditions of transition are fulfilled).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VRage.Generics.MySingleStateMachine.SetState(System.String)" -->
        <member name="T:VRage.Generics.StateMachine.MyCondition`1">
            <summary>
            Implementation of generic condition. Immutable class, once set, its parameters cant be changed.
            </summary>
        </member>
        <member name="T:VRage.Generics.MyStateMachineNode">
            <summary>
            Node of the state machine.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachineNode.TransitionAddedInternal(VRage.Generics.MyStateMachineTransition)">
            <summary>
            Called after Transition is added.
            Override for custom behavior.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachineNode.TransitionRemovedInternal(VRage.Generics.MyStateMachineTransition)">
            <summary>
            Called before Transition remove.
            Override for custom behavior.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachineNode.ExpandInternal(VRage.Generics.MyStateMachineCursor,VRage.Collections.MyConcurrentHashSet{VRage.Utils.MyStringId},System.Int32)">
            <summary>
            Expands current node with given cursor.
            First enquedAction is taking place then any valid transition.
            Cursor is being transitioned to result of expansion.
            Override this for custom behavior.
            </summary>
        </member>
        <member name="T:VRage.Generics.MyStateMachineTransition">
            <summary>
            Definition of transition to some node.
            </summary>
        </member>
        <member name="T:VRage.Generics.MyStateMachineTransitionWithStart">
            <summary>
            Pair holding transition and its starting node.
            </summary>
        </member>
        <member name="M:VRage.Generics.MyStateMachineTransitionWithStart.#ctor(VRage.Generics.MyStateMachineNode,VRage.Generics.MyStateMachineTransition)">
            <summary>
            Full constructor.
            </summary>
        </member>
        <member name="M:VRage.MyCompilationSymbols.IsProfilerAttached">
            <summary>
            This is reliable, enforced by .NET documentation.
            Without this environment variable, CLR won't attach profiler.
            </summary>
        </member>
        <member name="T:VRage.MyDeltaTransform">
            <summary>
            Transform structure for delta-transforms.
            </summary>
        </member>
        <member name="T:VRage.MySimpleProfiler">
            <summary>
            A simple performance profiler intended to show players information about which area of the game is slowing it down
            </summary>
        </member>
        <member name="F:VRage.MySimpleProfiler.ProfilingBlocks">
            <summary>
            Global keeper of all known profiling blocks.
            
            !!! Do not try to add new blocks into existing instance. !!!
            Allocate new instead, copy all existing blocks, merge new blocks and swap references.
            
            !!! Do not pool dictionaries as they may be still in use by other threads. !!!
            Allocations should happen only during firs few frames. It's trade-off for wait-free progress guarantee during runtime.
            </summary>
        </member>
        <member name="F:VRage.MySimpleProfiler.AddUponSync">
            <summary>
            When thread fails to find required block in global keeper, it will add it here and it will be added later.
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.BeginBlock(System.String,VRage.MySimpleProfiler.ProfilingBlockType)">
            <summary>
            Preferred way of measurement.
            Makes sure every block is properly ended and prevents Begin/End mismatch errors
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.Begin(System.String,VRage.MySimpleProfiler.ProfilingBlockType,System.String)">
            <summary>
            Begin new profiling block
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.End(System.String)">
            <summary>
            End profiling block
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.BeginGPUBlock(System.String)">
            <summary>
            Set which GPU profiling block is going to receive timing next
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.EndGPUBlock(VRage.Library.Utils.MyTimeSpan)">
            <summary>
            Log timing of currently set GPU block
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.Commit">
            <summary>
            Check performance and reset time
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.SetBlockSettings(System.String,System.Int32,System.Int32,VRage.MySimpleProfiler.ProfilingBlockType)">
            <summary>
            Set special settings for a profiling block
            <param name="thresholdFrame">Microseconds!</param>
            /// <param name="thresholdAverage">Microseconds!</param>
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.CheckPerformance(VRage.MySimpleProfiler.MySimpleProfilingBlock,System.Int32,System.Int32)">
            <summary>
            Checks performance of each profiling block and sends notifications if above threshold
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.ShowServerPerformanceWarning(System.String)">
            <summary>
            Show performance warning received from server
            </summary>
        </member>
        <member name="M:VRage.MySimpleProfiler.InvokePerformanceWarning(VRage.MySimpleProfiler.MySimpleProfilingBlock)">
            <summary>
            Unused, but returns the area which is the most above threshold, null if none is
            </summary>
        </member>
        <member name="M:VRage.Generics.MySparseGrid`2.ClearCells">
            <summary>
            Clears cells, but keep them preallocated
            </summary>
        </member>
        <member name="T:VRage.Generics.MyDynamicObjectPool`1">
            <summary>
            Dynamic object pool. It's allocate new instance when necessary.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VRage.Generics.MyObjectsPool`1.AllocateOrCreate(`0@)">
            <summary>
            Returns true when new item was allocated
            </summary>
        </member>
        <member name="T:VRage.Generics.MyWeightDictionary`1">
            <summary>
            Contains items of any type. Each item has weight (float value).
            Allows to get item based on weight.
            </summary>
            <typeparam name="T">The item type</typeparam>
        </member>
        <member name="M:VRage.Generics.MyWeightDictionary`1.#ctor(System.Collections.Generic.Dictionary{`0,System.Single})">
            <summary>
            Initializes a new instance of the MyWeightDictionary class.
            </summary>
            <param name="data">Dictionary with items and weights.</param>
        </member>
        <member name="M:VRage.Generics.MyWeightDictionary`1.GetSum">
            <summary>
            Gets sum of weights.
            </summary>
            <returns>The sum of all weights.</returns>
        </member>
        <member name="M:VRage.Generics.MyWeightDictionary`1.GetItemByWeightNormalized(System.Single)">
            <summary>
            Gets item based on weight.
            </summary>
            <param name="weightNormalized">Weight, value from 0 to 1.</param>
            <returns>The item.</returns>
        </member>
        <member name="M:VRage.Generics.MyWeightDictionary`1.GetItemByWeight(System.Single)">
            <summary>
            Gets item based on weight.
            </summary>
            <param name="weight">Weight, value from 0 to sum.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Generics.MyWeightDictionary`1.GetRandomItem(System.Random)">
            <summary>
            Gets random item based on weight.
            </summary>
            <returns>The item.</returns>
        </member>
        <member name="T:VRage.Noise.Models.MyCylinder">
            <summary>
            Maps the output of a module onto a cylinder.
            </summary>
        </member>
        <member name="T:VRage.Noise.Models.MySphere">
            <summary>
            Maps the output of a module onto a sphere.
            </summary>
        </member>
        <member name="T:VRage.Noise.Modifiers.MyAbs">
            <summary>
            Outputs the absolute value of the output value from a source module.
            </summary>
        </member>
        <member name="T:VRage.Noise.Modifiers.MyClamp">
            <summary>
            Clamps the output value from a source module to a range of values.
            </summary>
        </member>
        <member name="T:VRage.Noise.Modifiers.MyCurve">
            <summary>
            Maps the output value from a source module onto an arbitrary function curve.
            </summary>
        </member>
        <member name="T:VRage.Noise.Modifiers.MyExponent">
            <summary>
            Maps the output value from a source module onto an exponential curve.
            </summary>
        </member>
        <member name="T:VRage.Noise.Modifiers.MyInvert">
            <summary>
            Inverts the output value from a source module.
            </summary>
        </member>
        <member name="T:VRage.Noise.MyModule">
            <summary>
            High quality noise module that combines properties of Value noise and gradient noise.
            Value noise is used as input for gradient function. This leads to no artifacts or zero values at integer points.
            It's so called Value-Gradient noise.
            </summary>
        </member>
        <member name="T:VRage.Noise.MyModuleFast">
            <summary>
            Faster version of MyModule.
            This time we do not compute the gradient position directly but we're using gradient table lookup via permutation table.
            This leads to more 'grid' result as the local min and max (like in Value noise) are always appearing at integer points.
            </summary>
        </member>
        <member name="T:VRage.Noise.Patterns.MyCylinders">
            <summary>
            Noise that outputs concentric cylinders.
            Each cylinder extends infinitely along the y axis.
            </summary>
        </member>
        <member name="T:VRage.Noise.Patterns.MyRing">
            <summary>
            Noise that outputs dounut-like ring
            </summary>
        </member>
        <member name="T:VRage.Noise.Patterns.MySpheres">
            <summary>
            Noise that outputs concentric spheres.
            </summary>
        </member>
        <member name="T:VRage.MyMultipleEnabledEnum">
            <summary>
            Enumeration describing Enabled state of multiple objects.
            </summary>
        </member>
        <member name="F:VRage.Profiler.MyDrawArea.m_index">
            <summary>
            Index 0, 1, 2, 3, 4, 5...
            Makes range 1, 1.5, 2, 3, 4, 6, 8, 12, 24, 32, 48, 64...
            Negative index is supported as well.
            </summary>
        </member>
        <member name="M:VRage.Profiler.MyDrawArea.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes draw area.
            </summary>
            <param name="yRange">Range of y axis, will be rounded to 2^n or 2^n * 1.5</param>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.Enable">
            <summary>
            Only enables the profiler, used by the developer debug window
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.ToggleEnabled">
            <summary>
            Toggles profiler enabled/disabled state, doesn't reset profiler level
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.JumpToRoot">
            <summary>
            Jumps all the way to the root element
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.DisableFrameSelection">
            <summary>
            Disables the current selection again
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.ChangeSortingOrder">
            <summary>
            Changes the profiler's sorting order, see ProfilerSortingOptions for the possible sorting options
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.CopyPathToClipboard">
            <summary>
            Copies the current path to clipboard
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerCommand.TryGoToPathInClipboard">
            <summary>
            Tries to navigate to the path in the clipboard
            </summary>
        </member>
        <member name="T:VRage.Profiler.RenderProfilerSortingOrder">
            <summary>
            Profiler sorting order types
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerSortingOrder.Id">
            <summary>
            Order in which the elements are logged
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerSortingOrder.MillisecondsLastFrame">
            <summary>
            Milliseconds spent in the previous frame, sorted from slowest to fastest
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerSortingOrder.MillisecondsAverage">
            <summary>
            Milliseconds spent on average, sorted from slowest to fastest
            </summary>
        </member>
        <member name="F:VRage.Profiler.RenderProfilerSortingOrder.NumSortingTypes">
            <summary>
            Total number of sorting types
            </summary>
        </member>
        <member name="T:VRage.Profiler.MyRenderProfiler">
            <summary>
            Provides profiling capability
            </summary>
            <remarks>
            Non-locking way of render profiler is used. Each thread has it's own profiler is ThreadStatic variable.
            Data for each profiling block are of two kinds: Immediate (current frame being profiled) and History (previous finished frames)
            Start/End locking is not necessary, because Start/Stop uses only immediate data and nothing else uses it at the moment.
            Commit is only other place which uses Immediate data, but it must be called from same thead, no racing condition.
            Draw and Commit both uses History data, and both can be called from different thread, so there's lock.
            This way everything runs with no waiting, unless Draw obtains lock in which case Commit wait for Draw to finish (Start/End is still exact).
            
            For threads which does not call commit (background workers, parallel tasks), mechanism which calls commit automatically after each top level End should be added.
            This way each task will be one "frame" on display
            </remarks>
        </member>
        <member name="F:VRage.Profiler.MyRenderProfiler.m_sortingOrder">
            <summary>
            Sorting order will sort the listed elements in the profiler by the specified ProfilerSortingOrder
            </summary>
        </member>
        <member name="M:VRage.Profiler.MyRenderProfiler.CreateProfiler(System.String,System.String,System.Boolean)">
            <summary>
            Creates new profiler which can be used to profile anything (e.g. network stats).
            </summary>
        </member>
        <member name="P:VRage.Profiler.MyRenderProfiler.ProfilerVisible">
            <summary>
            Returns true when profiler is visible.
            </summary>
        </member>
        <member name="T:VRage.Profiler.NetProfiler">
            <summary>
            Shortcut class for network profiler.
            </summary>
        </member>
        <member name="M:VRage.Profiler.NetProfiler.Begin(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Starts net profiling block.
            </summary>
        </member>
        <member name="M:VRage.Profiler.NetProfiler.End(System.Nullable{System.Single},System.Single,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            End net profiling block.
            </summary>
            <param name="bytesTransfered">Specify number of bytes transferred or null to automatically calculate number of bytes from inner blocks.</param>
            <param name="customValue">You can put any number here.</param>
            <param name="customValueFormat">This is formatting string how the number will be written on screen, use something like: 'MyNumber: {0} foos/s'</param>
        </member>
        <member name="T:VRage.Network.BlockingAttribute">
            <summary>
            Indicates that event will be blocking all other events.
            </summary>
        </member>
        <member name="M:VRage.Network.BlockingAttribute.#ctor">
            <summary>
            Creates attribute that indicates that event will be blocking all other events until this is resolved.
            </summary>
        </member>
        <member name="T:VRage.Network.BroadcastExceptAttribute">
            <summary>
            Client method. Decorated method is be called by server on all clients (except the one who invoked it on server or the one specified in RaiseEvent...when called from server).
            Clients always trust server and does not perform any validation.
            When used together with Server attribute, server validates data, invokes the method on server and then sends it to all clients except the client who invoked it on server.
            </summary>
        </member>
        <member name="T:VRage.Network.BroadcastAttribute">
            <summary>
            Client method. Decorated method is be called by server on all clients.
            Clients always trust server and does not perform any validation.
            When used together with Server attribute, server (optionally) validates data, invokes the method on server and then sends it to all clients.
            If the data is found invalid, it can be marked so by calling MyEventContext.ValidationFailed() on the server. The broadcasts will then not be performed.
            </summary>
        </member>
        <member name="T:VRage.Network.ClientAttribute">
            <summary>
            Client method. Decorated method is be called by server on client.
            Clients always trust server and does not perform any validation.
            When used together with Server attribute, server validates data, invokes the method on server and then sends it to client who invoked it on server.
            </summary>
        </member>
        <member name="T:VRage.Network.EndpointId">
            <summary>
            Id of network endpoint, opaque struct, internal value should not be accessed outside VRage.Network.
            EndpointId is not guid and can change when client reconnects to server.
            Internally it's SteamId or RakNetGUID.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyBandwidthLimits.GetLimit(VRage.Network.StateGroupEnum)">
            <summary>
            Gets current limit for group (how many bits can be written per frame).
            Return zero when there's no limit.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyBandwidthLimits.SetLimit(VRage.Network.StateGroupEnum,System.Int32)">
            <summary>
            Sets limit for group (how many bits can be written per frame).
            It's ensured that at least one item is sent every frame.
            Setting limit to zero disables limit.
            </summary>
        </member>
        <member name="M:VRage.Network.MyClientInfo.GetPriority(VRage.Network.IMyReplicable)">
            <summary>
            Gets priority of different replicable.
            E.g. can be used to get priority of grid when calling GetPriority on cube block.
            </summary>
        </member>
        <member name="T:VRage.Replication.MyMultiplayerMinimalBase">
            <summary>
            This stub should be merged with MyMultiplayerBase as soon as possible and the result should be put in planned library VRage.Multiplayer.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyReplicablesBase.RefreshChildrenHierarchy(VRage.Network.IMyReplicable)">
            <summary>
            Refreshes all children.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyReplicablesBase.Add(VRage.Network.IMyReplicable,VRage.Network.IMyReplicable@)">
            <summary>
            Sets or resets replicable (updates child status and parent).
            Returns true if replicable is root, otherwise false.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyReplicablesBase.RemoveHierarchy(VRage.Network.IMyReplicable)">
            <summary>
            Removes replicable with all children, children of children, etc.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyReplicablesBase.Refresh(VRage.Network.IMyReplicable)">
            <summary>
            Refreshes replicable, updates it's child status and parent.
            </summary>
        </member>
        <member name="M:VRage.Replication.MyReplicablesBase.Remove(VRage.Network.IMyReplicable)">
            <summary>
            Removes replicable, children should be already removed
            </summary>
        </member>
        <member name="T:VRage.Network.NotReplicableAttribute">
            <summary>
            Marks class which should be never replicated.
            </summary>
        </member>
        <member name="M:System.Extensions.FindStateGroup``1(VRage.Network.IMyReplicable)">
            <summary>
            Finds state group of specified type.
            Returns null when group of specified type not found.
            </summary>
        </member>
        <member name="T:VRage.Network.IMyEventProxy">
            <summary>
            Interface which only marks class as event owner.
            Object itself must be replicated in network to allow raising events.
            If you considering to add this to object, it's probably wrong and you should use static events in most cases.
            This is commonly implemented only by entities which has it's external replicable.
            </summary>
        </member>
        <member name="T:VRage.Network.IMyEventOwner">
            <summary>
            Common interface for IMyNetObject and IMyEventProxy used to raise events.
            Base interface for classes passed as event instance.
            Custom implementations not supported.
            </summary>
        </member>
        <member name="T:VRage.Network.IMyNetObject">
            <summary>
            Base interface for networked object.
            Derived interfaces are so far IMyReplicable and IMyStateGroup.
            </summary>
        </member>
        <member name="P:VRage.Network.IMyProxyTarget.Target">
            <summary>
            Gets target object.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.GetParent">
            <summary>
            Gets parent which must be replicated first.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.GetPriority(VRage.Network.MyClientInfo,System.Boolean)">
            <summary>
            Gets priority related to client.
            When priority is lower than zero, it means the object is not relevant for client.
            Default priority is 1.0f.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.OnSave(VRage.Library.Collections.BitStream)">
            <summary>
            Serializes object for replication to client.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.OnLoad(VRage.Library.Collections.BitStream,System.Action{System.Boolean})">
            <summary>
            Client deserializes object and adds it to proper collection (e.g. MyEntities).
            Loading done handler can be called synchronously or asynchronously (but always from Update thread).
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.OnLoadBegin(VRage.Library.Collections.BitStream,System.Action{System.Boolean})">
            <summary>
            Client deserializes object and adds it to proper collection (e.g. MyEntities).
            Loading done handler can be called synchronously or asynchronously (but always from Update thread).
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.OnDestroy">
            <summary>
            Called on client when server destroyed this replicable.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.GetStateGroups(System.Collections.Generic.List{VRage.Network.IMyStateGroup})">
            <summary>
            Returns state groups for replicable in a list.
            This method can has to return objects in same order every time (e.g. first terminal, second physics etc).
            It does not have to return same instances every time.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyReplicable.GetAABB">
            <summary>
            Root replicables always have spatial representation. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VRage.Network.IMyReplicable.GetDependencies">
            <summary>
            Dependend replicables, which might not be in AABB of this replicable. Ie. all relayed antennas are depended 
            on mycharacter and need to be synced with him. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:VRage.Network.IMyReplicable.HasToBeChild">
            <summary>
            Child replicables are strongly dependent on parent.
            When parent is replicated, children are replicated, priority is never checked for children.
            Parent can change during replicable runtime, HasToBeChild can not.
            </summary>
        </member>
        <member name="P:VRage.Network.IMyReplicable.PriorityUpdate">
            <summary>
            Should this replicable be replicated immediately (in priority updates)?
            </summary>
        </member>
        <member name="P:VRage.Network.IMyReplicable.OnAABBChanged">
            <summary>
            Called when root replicable AABB changed
            </summary>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.CreateClientData(VRage.Network.MyClientStateBase)">
            <summary>
            Called on server new clients starts replicating this group.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.DestroyClientData(VRage.Network.MyClientStateBase)">
            <summary>
            Called on server when client stops replicating this group.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.ClientUpdate(VRage.Library.Utils.MyTimeSpan)">
            <summary>
            Update method called on client.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.Destroy">
            <summary>
            Called when state group is being destroyed.
            </summary>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.GetGroupPriority(System.Int32,VRage.Network.MyClientInfo)">
            <summary>
            Gets priority related to client.
            When priority is lower than zero, it means the object is not relevant for client.
            Default priority is 1.0f.
            </summary>
            <param name="frameCountWithoutSync">How long (in update frame count) has client not received sync of this state group.</param>
            <param name="forClient">Client for whom is the priority get.</param>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.Serialize(VRage.Library.Collections.BitStream,VRage.Network.Endpoint,VRage.Library.Utils.MyTimeSpan,System.Byte,System.Int32,System.Collections.Generic.HashSet{System.String})">
            <summary>
            (De)serializes group state or it's diff for client.
            When writing, you can write beyond maxBitPosition, but message won't be sent and ACKs won't be received for it.
            ReplicationServer will detect, that state group written beyond packet size and revert it.
            When nothing written, ReplicationServer will detect that and state group won't receive ACK for that packet id.
            </summary>
            <param name="stream">Stream to write to or read from.</param>
            <param name="forClient">When writing the client which will receive the data. When reading, it's null.</param>
            <param name="timestamp"></param>
            <param name="packetId">Id of packet in which the data will be sent or from which the data is received.</param>
            <param name="maxBitPosition">Maximum position in bit stream where you can write data, it's inclusive.</param>
            <param name="cachedData"></param>
        </member>
        <member name="M:VRage.Network.IMyStateGroup.OnAck(VRage.Network.MyClientStateBase,System.Byte,System.Boolean)">
            <summary>
            Called for each packet id sent to client from this state group.
            When ACK received, called immediatelly.
            When several other packets received from client, but some were missing, called for each missing packet.
            </summary>
            <param name="forClient">The client.</param>
            <param name="packetId">Id of the delivered or lost packet.</param>
            <param name="delivered">True when packet was delivered, false when packet is considered lost.</param>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.EnqueueEvent(VRage.Library.Collections.BitStream,VRage.Network.NetworkId,VRage.Network.NetworkId,System.UInt32,VRage.Network.EndpointId)">
            <summary>
            Enqueues event that have to be done on target object.
            </summary>
            <param name="stream">Stream with event data.</param>
            <param name="targetObjectId">Object id that is a target of the event.</param>
            <param name="blockingObjectId">Object id that is blocking target to be processed. 'NetworkId.Invalid' if none.</param>
            <param name="eventId">Event id.</param>
            <param name="sender">Endpoint.</param>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.EnqueueBarrier(VRage.Network.NetworkId,VRage.Network.NetworkId)">
            <summary>
            Enqueues barrier for an entity that is targeting network object with blocking event. WARNING: Have to be in
            pair with blocking event!
            </summary>
            <param name="targetObjectId">Network object id that will get barrier event.</param>
            <param name="blockingObjectId">Network object that have blocking event.</param>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.RemoveEvents(VRage.Network.NetworkId)">
            <summary>
            Removes all events from target id.
            </summary>
            <param name="objectInstance">Target object network id.</param>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.TryLiftBarrier(VRage.Network.NetworkId)">
            <summary>
            Tries to lift barrier from target network object. If successfull, removes this barrier from
            target object events queue. Also barrier must be aiming target object id.
            </summary>
            <param name="targetObjectId">Target network object id.</param>
            <returns>True if barrier found on the top of target object events queue. Otherwise false.</returns>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.ProcessEvents(VRage.Network.NetworkId,VRage.Replication.MyEventsBuffer.Handler,VRage.Replication.MyEventsBuffer.IsBlockedHandler,VRage.Network.NetworkId)">
            <summary>
            Tries to process events for prarticular object id (network id).
            </summary>
            <param name="targetObjectId">Target object network id.</param>
            <param name="eventHandler">Handler for processing events.</param>
            <param name="isBlockedHandler">Handler for checking if processing of events should be canceled.</param>
            <param name="caller">Parent Network id from which this is called. Set NetworkId.Invalid if no parent.</param>
            <returns>True if all sucessfull.</returns>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.ProcessBarrierEvent(VRage.Network.NetworkId,VRage.Replication.MyEventsBuffer.MyBufferedEvent,VRage.Replication.MyEventsBuffer.Handler,VRage.Replication.MyEventsBuffer.IsBlockedHandler)">
            <summary>
            Process barrier event.
            </summary>
            <param name="targetObjectId">Target of the barrier event.</param>
            <param name="eventToProcess">Event to process.</param>
            <param name="eventHandler">Handler for processing event.</param>
            <param name="isBlockedHandler">Handler for checking if processing of events should be canceled.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.ProcessBlockingEvent(VRage.Network.NetworkId,VRage.Replication.MyEventsBuffer.MyBufferedEvent,VRage.Network.NetworkId,VRage.Replication.MyEventsBuffer.Handler,VRage.Replication.MyEventsBuffer.IsBlockedHandler,System.Collections.Generic.Queue{VRage.Network.NetworkId}@)">
            <summary>
            Process blocking event.
            </summary>
            <param name="targetObjectId">Target object id for which to process.</param>
            <param name="eventToProcess">Event to be processed.</param>
            <param name="caller">Parent Network id from which this is called. Set NetworkId.Invalid if no parent.</param>
            <param name="eventHandler">Handler for processing event.</param>
            <param name="isBlockedHandler">Handler for checking if processing of events should be canceled.</param>
            <param name="postProcessQueue">Queue that should be post processed.</param>
            <returns>True if was success.</returns>
        </member>
        <member name="M:VRage.Replication.MyEventsBuffer.GetEventsBufferStat">
            <summary>
            Gets events buffer statistics.
            </summary>
            <returns>Formatted events buffer statistics.</returns>
        </member>
        <member name="F:VRage.Replication.MyEventsBuffer.MyBufferedEvent.Stream">
            <summary>
            Stream with the event
            </summary>
        </member>
        <member name="F:VRage.Replication.MyEventsBuffer.MyBufferedEvent.TargetObjectId">
            <summary>
            Target object net id of the event.
            </summary>
        </member>
        <member name="F:VRage.Replication.MyEventsBuffer.MyBufferedEvent.BlockingObjectId">
            <summary>
            Object network id that is blocking this event. If 'NetworkId.Invalid' than no blocking object.
            </summary>
        </member>
        <member name="F:VRage.Replication.MyEventsBuffer.MyBufferedEvent.IsBarrier">
            <summary>
            Indicates if this event is a barrier.
            </summary>
        </member>
        <member name="F:VRage.Replication.MyEventsBuffer.MyObjectEventsBuffer.Events">
            <summary>
            Events to be processed for network object.
            </summary>
        </member>
        <member name="F:VRage.Replication.MyEventsBuffer.MyObjectEventsBuffer.IsProcessing">
            <summary>
            Indicates if events are currently processed.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationLayerBase.InvokeLocally``7(VRage.Network.CallSite{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Invokes event locally without validation and with empty Sender and ClientData.
            </summary>
        </member>
        <member name="T:VRage.Network.RefreshReplicableAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:VRage.Network.MyClientStateBase">
            <summary>
            Base class for game-defined client state.
            It's set of data required by server, sent from client.
            E.g. current client area of interest, context (game, terminal, inventory etc...)
            Abstract class for performance reasons (often casting)
            </summary>
        </member>
        <member name="M:VRage.Network.MyClientStateBase.Serialize(VRage.Library.Collections.BitStream,System.Boolean)">
            <summary>
            Serializes state into/from bit stream.
            EndpointId should be ignored.
            </summary>
        </member>
        <member name="P:VRage.Network.MyClientStateBase.EndpointId">
            <summary>
            Client endpoint, don't serialize it in Serialize()
            </summary>
        </member>
        <member name="F:VRage.Network.MyEventContext.Sender">
            <summary>
            Event sender, default(EndpointId) when invoked locally.
            </summary>
        </member>
        <member name="F:VRage.Network.MyEventContext.ClientState">
            <summary>
            Event sender client data, valid only when invoked remotely on server, otherwise null.
            </summary>
        </member>
        <member name="F:VRage.Network.MyEventContext.IsValidationRequired">
            <summary>
            True if validation is required.
            </summary>
        </member>
        <member name="M:VRage.Network.MyPacketQueue.Clear">
            <summary>
            Clears whole queue.
            </summary>
        </member>
        <member name="M:VRage.Network.MyPacketQueue.Enqueue(VRage.Library.Collections.BitStream,System.Single,VRage.Network.EndpointId)">
            <summary>
            Sends message, when broadcasting, recipient is peer who won't receive the message.
            </summary>
        </member>
        <member name="M:VRage.Network.MyPacketQueue.Send(System.Int32)">
            <summary>
            Sends packets in queue, sends no more than maxBytesToSend.
            Returns number of bytes sent.
            </summary>
        </member>
        <member name="P:VRage.Replication.MyReplicableClientData.IsSleeping">
            <summary>
            When replicable is sleeping, it should not receive state updates. But it has to receive events.
            </summary>
        </member>
        <member name="P:VRage.Replication.MyReplicableClientData.HasActiveStateSync">
            <summary>
            Returns true when replicable is not pending and is not sleeping.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationLayer.ReserveFixedIds(System.UInt32)">
            <summary>
            Reserves IDs for fixed objects.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationLayer.AddFixedNetworkObject(System.UInt32,VRage.Network.IMyNetObject)">
            <summary>
            Add network object with fixed ID.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationLayer.GetMultiplayerStat">
            <summary>
            Returns string with current multiplayer status. Use only for debugging.
            </summary>
            <returns>Already formatted string with current multiplayer status.</returns>
        </member>
        <member name="M:VRage.Network.MyReplicationLayer.DispatchEvent(VRage.Library.Collections.BitStream,VRage.Network.CallSite,VRage.Network.EndpointId,VRage.Network.IMyNetObject,System.Single)">
            <summary>
            Called when event is raised locally to send it to other peer(s).
            Return true to invoke event locally.
            </summary>
            <remarks>
            Invoking event locally is important to be done AFTER event is sent to other peers, 
            because invocation can raise another event and order must be preserved.
            Local event invocation is done in optimized way without unnecessary deserialization.
            </remarks>
        </member>
        <member name="M:VRage.Network.MyReplicationLayer.OnEvent(VRage.Library.Collections.BitStream,VRage.Network.CallSite,System.Object,VRage.Network.IMyNetObject,VRage.Network.EndpointId)">
            <summary>
            Called when event is received over network.
            Event can be validated, invoked and/or transferred to other peers.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationLayer.Invoke(VRage.Network.CallSite,VRage.Library.Collections.BitStream,System.Object,VRage.Network.EndpointId,VRage.Network.MyClientStateBase,System.Boolean)">
            <summary>
            Reads arguments from stream and invokes event. Returns false when validation failed, otherwise true.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationClient.SetReplicableReady(VRage.Network.NetworkId,VRage.Network.IMyReplicable,System.Boolean)">
            <summary>
            Marks replicable as successfully created, ready to receive events and state groups data.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationClient.IsBlocked(VRage.Network.NetworkId,VRage.Network.NetworkId)">
            <summary>
            Checks if network id is blocked by other network id.
            </summary>
            <param name="networkId">Target network id.</param>
            <param name="blockedNetId">Blocking network id.</param>
            <returns></returns>
        </member>
        <member name="M:VRage.Network.MyReplicationClient.OnServerStateSync(VRage.MyPacket)">
            <summary>
            Processes state sync sent by server.
            </summary>
        </member>
        <member name="F:VRage.Network.MyReplicationServer.m_replicables">
            <summary>
            All replicables on server.
            </summary>
        </member>
        <member name="F:VRage.Network.MyReplicationServer.m_replicableGroups">
            <summary>
            All replicable state groups.
            </summary>
        </member>
        <member name="F:VRage.Network.MyReplicationServer.m_clientStates">
            <summary>
            Network objects and states which are actively replicating to clients.
            </summary>
        </member>
        <member name="F:VRage.Network.MyReplicationServer.m_recentClientsStates">
            <summary>
            Clients that recently disconnected are saved here for some time so that the server doesn't freak out in case some calls are still pending for them
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.PauseReplication">
            <summary>
            Stops sending replication create until resumed.
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.ForceReplicable(VRage.Network.IMyReplicable,VRage.Network.IMyReplicable)">
            <summary>
            Hack to allow thing like: CreateCharacter, Respawn sent from server
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.ForceReplicable(VRage.Network.IMyReplicable,VRage.Network.Endpoint)">
            <summary>
            Hack to allow thing like: CreateCharacter, Respawn sent from server
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.ForceEverything(VRage.Network.Endpoint)">
            <summary>
            Sends everything in the world to client. Use with extreme caution!
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.ResetForClients(VRage.Network.IMyReplicable)">
            <summary>
            Destroys replicable for all clients (used for testing and debugging).
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.IsPreceding(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true when current packet is closely preceding last packet (is within threshold)
            </summary>
        </member>
        <member name="M:VRage.Network.MyReplicationServer.RefreshReplicable(VRage.Network.IMyReplicable,VRage.Network.Endpoint,VRage.Network.MyReplicationServer.ClientData,System.Boolean)">
            <summary>
            Refreshes replicable priorities per client
            </summary>
            <param name="replicable"></param>
        </member>
        <member name="T:VRage.Network.MySynchronizedTypeInfo">
            <summary>
            Type descriptor for synchronized type.
            </summary>
        </member>
        <member name="M:VRage.Network.MyTypeTable.Serialize(VRage.Library.Collections.BitStream)">
            <summary>
            Serializes id to hash list.
            Server sends the hashlist to client, client reorders type table to same order as server.
            </summary>
        </member>
        <member name="T:VRage.Network.NetworkId">
            <summary>
            Network object identifier. Similar to entity id, but on network.
            Also one entity can have multiple NetworkIds, one main, one for physics sync, one for terminal sync and more.
            Opaque struct, it should not be necessary to internal member outside VRage.Network.
            NetworkId is not persistent and changes with server restart, never store it in persistent storage (saves).
            Internally takes advantage of small numbers.
            </summary>
        </member>
        <member name="T:VRage.Network.ReliableAttribute">
            <summary>
            Event which is sent reliably, use with caution and only when necessary!
            </summary>
        </member>
        <member name="T:VRage.Network.ServerAttribute">
            <summary>
            Server method. Decorated method is be called by client on server or by server locally.
            Server performs validation. Pass null as validation method to perform no validation (not recommended)
            </summary>
        </member>
        <member name="T:VRage.Network.StateGroupEnum">
            <summary>
            State groups, used to limit bandwidth by group.
            </summary>
        </member>
        <member name="P:VRage.Serialization.SerializableDictionary`2.Dictionary">
            <summary>
            Public stuff dictionary.
            </summary>
            <remarks>
            Note the XmlIgnore attribute.
            </remarks>
        </member>
        <member name="P:VRage.Serialization.SerializableDictionary`2.DictionaryEntryProp">
            <summary>
            Property created expressly for the XmlSerializer
            </summary>
            <remarks>
            Note the XML Serialiazation attributes; they control what elements are named when this object is serialized.
            </remarks>
        </member>
        <member name="P:VRage.Serialization.SerializableDictionaryCompat`3.DictionaryEntryProp">
            <summary>
            Property created expressly for the XmlSerializer
            </summary>
            <remarks>
            Note the XML Serialiazation attributes; they control what elements are named when this object is serialized.
            </remarks>
        </member>
        <member name="M:VRage.Serialization.MySerializer`1.Clone(`0@)">
            <summary>
            In-place clone.
            Primitive and immutable types can implements this as empty method.
            Reference types must create new instance a fill it's members.
            </summary>
        </member>
        <member name="M:VRage.Serialization.MySerializer`1.Equals(`0@,`0@)">
            <summary>
            Tests equality.
            </summary>
        </member>
        <member name="T:VRage.CustomRootReader">
            <summary>
            Custom XmlReader that allows to read xml fragments
            </summary>
        </member>
        <member name="M:VRage.Serialization.MyMemberSerializer.Clone(System.Object,System.Object)">
            <summary>
            Makes clone of object member.
            </summary>
        </member>
        <member name="M:VRage.Serialization.MyMemberSerializer.Equals(System.Object,System.Object)">
            <summary>
            Tests equality of object members.
            </summary>
        </member>
        <member name="F:VRage.Serialization.MySerializeInfo.KeyInfo">
            <summary>
            Serialization settings for dictionar key.
            </summary>
        </member>
        <member name="F:VRage.Serialization.MySerializeInfo.ItemInfo">
            <summary>
            Serialization settings for dictionary value or collection / array elements
            </summary>
        </member>
        <member name="M:VRage.Serialization.MyMemberSerializer`1.Clone(`0@,`0@)">
            <summary>
            Makes clone of object member.
            </summary>
        </member>
        <member name="M:VRage.Serialization.MyMemberSerializer`1.Equals(`0@,`0@)">
            <summary>
            Tests equality of object members.
            </summary>
        </member>
        <member name="T:VRage.MyXmlSerializerBase`1">
            <summary>
            Xml serializer base class with custom root element reader/writer caching
            </summary>
            <typeparam name="TAbstractBase"></typeparam>
        </member>
        <member name="T:VRage.MyAbstractXmlSerializer`1">
            <summary>
            Custom xml serializer that allows object instantiation on elements with xsl:type attribute
            </summary>
            <typeparam name="TAbstractBase"></typeparam>
        </member>
        <member name="T:VRage.CustomRootWriter">
            <summary>
            Custom XmlWriter that allows to write xml fragments
            </summary>
        </member>
        <member name="T:VRage.MyStructXmlSerializer`1">
            <summary>
            Deserializes structs using a specified default value (see StructDefaultAttribute).
            </summary>
        </member>
        <member name="T:VRage.MyStructXmlSerializer`1.Accessor">
            <summary>
            Abstract accessor for both fields and properties
            </summary>
        </member>
        <member name="M:VRage.MyXmlSerializerManager.RegisterType(System.Type,System.Boolean,System.Boolean)">
            <param name="forceRegister">Force registration for types without XmlType
            attribute or not object builders</param>
        </member>
        <member name="T:VRage.MyXmlTextReader">
            <summary>
            Custom XML Reader with user data attached
            </summary>
        </member>
        <member name="P:VRage.MyXmlTextReader.DefinitionTypeOverrideMap">
            <summary>
            Map to override definitions types
            </summary>
        </member>
        <member name="M:VRage.Sync.SyncExtensions.AlwaysReject``2(VRage.Sync.Sync{``0,``1})">
            <summary>
            Sets validation handler to always return false.
            </summary>
        </member>
        <member name="M:VRage.Sync.SyncExtensions.ValidateRange``1(VRage.Sync.Sync{System.Single,``0},System.Single,System.Single)">
            <summary>
            Sets validate handler to validate that value is in range.
            </summary>
        </member>
        <member name="M:VRage.Sync.SyncExtensions.ValidateRange``1(VRage.Sync.Sync{System.Single,``0},System.Func{System.Single},System.Func{System.Single})">
            <summary>
            Sets validate handler to validate that value is in range.
            </summary>
        </member>
        <member name="M:VRage.Sync.SyncExtensions.ValidateRange``1(VRage.Sync.Sync{System.Single,``0},System.Func{VRageMath.MyBounds})">
            <summary>
            Sets validate handler to validate that value is withing bounds.
            </summary>
        </member>
        <member name="M:VRage.Sync.SyncHelpers.Compose(System.Object,System.Int32,System.Collections.Generic.List{VRage.Sync.SyncBase})">
            <summary>
            Takes objects and creates instances of Sync fields.
            </summary>
        </member>
        <member name="E:VRage.Sync.SyncBase.ValueChanged">
            <summary>
            ValueChanged event is raised when value is set locally (settings Value property) or remotely (through deserialization).
            When validation fails, value is not changed and ValueChanged is not raised.
            </summary>
        </member>
        <member name="T:VRage.Sync.SyncDirection">
            <summary>
            Sync variable synchronization direction.
            </summary>
        </member>
        <member name="T:VRage.Sync.SyncDirection.FromServer">
            Allow writing on server, send to client, deny writing on client.
        </member>
        <member name="T:VRage.Sync.Sync`2">
            <summary>
            Implementation of synchronized property value.
            </summary>
            <typeparam name="T">property type</typeparam>
            <typeparam name="TSyncDirection">Allowed synchronization direction, can be SyncDirection.BothWays or SyncDirection.FromServer.</typeparam>
        </member>
        <member name="F:VRage.Sync.Sync`2.TypeSerializer">
            <summary>
            Static instance of type serializer for this sync property.
            </summary>
        </member>
        <member name="F:VRage.Sync.Sync`2.m_value">
            <summary>
            Local value storage.
            </summary>
        </member>
        <member name="F:VRage.Sync.Sync`2.Validate">
            <summary>
            Validate handler is raised on server after deserialization.
            </summary>
        </member>
        <member name="M:VRage.Sync.Sync`2.ToString">
            <summary>
            Convert value of this sync property to string.
            </summary>
        </member>
        <member name="M:VRage.Sync.Sync`2.IsValid(`0@)">
            <summary>
            Validate the given external value.
            </summary>
            <param name="value">external value of the same type as this sync property</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:VRage.Sync.Sync`2.SetValue(`0@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set the value of this sync property.
            </summary>
            <param name="newValue">New value to be assigned to this instance</param>
            <param name="validate">Validate the new value</param>
            <param name="ignoreSyncDirection">If true, value arrived from server (pass SyncDirection test).</param>
            <returns>false if the value was not set</returns>
        </member>
        <member name="M:VRage.Sync.Sync`2.ValidateAndSet(`0)">
            <summary>
            Validates the value and sets it (when valid).
            </summary>
        </member>
        <member name="M:VRage.Sync.Sync`2.SetLocalValue(`0)">
            <summary>
            Sets new value only locally if on client. USE ONLY WITH VALUES YOU GOT FROM THE SERVER VIA OTHER CHANNELS! (e.g. when initializing from object builder)
            Behaves like regular set on the server
            </summary>
        </member>
        <member name="P:VRage.Sync.Sync`2.Value">
            <summary>
            Value setter/getter.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyDebugListenerProvider">
            <summary>
            Enables a custom behavior of Assertion debug messages.
            Abort can be only performed by clicking the option, key press does nothing.
            Control+Ignore will prevent the assertion from appearing.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyDebugListenerProvider.Register">
            <summary>
            Call this once to register custom trace listener and clear previous debug listeners.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyDebugListenerProvider.Unregister">
            <summary>
            Call this once to unregister custom listener and restore old listeners.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyDiscreteSampler`1">
            <summary>
            A templated class for sampling from a set of objects with given probabilities. Uses MyDiscreteSampler.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyDiscreteSampler">
            <summary>
            Provides a simple and efficient way of sampling a discrete probability distribution as described in http://www.jstatsoft.org/v11/i03/paper
            Instances can be reused by calling the Prepare method every time you want to change the distribution.
            Sampling a value is O(1), while the storage requirements are O(N), where N is number of possible values
            </summary>
        </member>
        <member name="M:VRage.Utils.MyDiscreteSampler.Prepare(System.Collections.Generic.IEnumerable{System.Single})">
            The list supplied to the method does not have to add up to 1.0f, that's why it's called "densities" instead of "probabilities"
        </member>
        <member name="M:VRage.Utils.MyDiscreteSampler.Sample(System.Single)">
            Beware that Cestmir thinks this can be less precise if you have a billiard numbers.
            
            He is probably right. So only use this version if you don't care.
        </member>
        <member name="T:VRage.Utils.MyAverageFiltering">
            <summary>
            Mean (average) filtering.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyAverageFiltering.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="sampleCount">Number of samples used in this mean filter.</param>
        </member>
        <member name="M:VRage.Utils.MyAverageFiltering.Add(System.Double)">
            <summary>
            Add raw value to be filtered.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyAverageFiltering.Get">
            <summary>
            Get filtered value.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyMaxFiltering">
            <summary>
            Nonlinear maximum filtering.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyMaxFiltering.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="sampleCount">Number of samples used in this mean filter.</param>
        </member>
        <member name="M:VRage.Utils.MyMaxFiltering.Add(System.Double)">
            <summary>
            Add raw value to be filtered.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyMaxFiltering.Get">
            <summary>
            Get filtered value.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyMergeHelper">
            <summary>
            Helper class for merge funcionality. Performs comparison between
            source and other values and set on self if value is different
            </summary>
        </member>
        <member name="T:VRage.Utils.MyMinFiltering">
            <summary>
            Nonlinear minimum filtering.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyMinFiltering.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="sampleCount">Number of samples used in this mean filter.</param>
        </member>
        <member name="M:VRage.Utils.MyMinFiltering.Add(System.Double)">
            <summary>
            Add raw value to be filtered.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyMinFiltering.Get">
            <summary>
            Get filtered value.
            </summary>
        </member>
        <member name="P:VRage.MyVertexFormatVoxelSingleData2.MaterialAlphaIndex">
            <summary>
            For multimaterial vertex only
            0, 1 or 2, indicates what material is on this vertex
            </summary>
        </member>
        <member name="P:VRage.MyVertexFormatVoxelSingleData.Material">
            <summary>
            For multimaterial vertex only
            0, 1 or 2, indicates what material is on this vertex
            </summary>
        </member>
        <member name="M:VRage.MyCubeInstanceData.ResetBones">
            <summary>
            Resets bones to zero and disables skinning
            </summary>
        </member>
        <member name="M:VRage.MyCubeInstanceData.GetNormalizedBone(System.Int32)">
            <returns>Vector in range [0,1]</returns>
        </member>
        <member name="M:VRage.MyCubeInstanceData.Denormalize(VRageMath.Vector4,System.Single)">
            <param name="position">Scaled in range [0,1]</param>
            <param name="range">Unscaled</param>
            <returns>Unscaled position</returns>
        </member>
        <member name="P:VRage.MyCubeInstanceData.Translation">
            <summary>
            Gets translation, faster than getting local matrix
            </summary>
        </member>
        <member name="T:VRage.Utils.MyUtils">
            <summary>
            MyFileSystemUtils
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetEdgeSphereCollision(VRageMath.Vector3D@,System.Single,VRage.MyTriangle_Vertices@)">
            <summary>
            Returns intersection point between sphere and its edges. But only if there is intersection between sphere and one of the edges.
            If sphere intersects somewhere inside the triangle, this method will not detect it.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetInsidePolygonForSphereCollision(VRageMath.Vector3D@,VRage.MyTriangle_Vertices@)">
            <summary>
            Return true if point is inside the triangle.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetInsidePolygonForSphereCollision(VRageMath.Vector3@,VRage.MyTriangle_Vertices@)">
            <summary>
            Return true if point is inside the triangle.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetLineTriangleIntersection(VRageMath.Line@,VRage.MyTriangle_Vertices@)">
             <summary>
             Checks whether a ray intersects a triangleVertexes. This uses the algorithm
             developed by Tomas Moller and Ben Trumbore, which was published in the
             Journal of Graphics Tools, pitch 2, "Fast, Minimum Storage Ray-Triangle
             Intersection".
            
             This method is implemented using the pass-by-reference versions of the
             XNA math functions. Using these overloads is generally not recommended,
             because they make the code less readable than the normal pass-by-value
             versions. This method can be called very frequently in a tight inner loop,
             however, so in this particular case the performance benefits from passing
             everything by reference outweigh the loss of readability.
             </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetSphereTriangleIntersection(VRageMath.BoundingSphereD@,VRage.Utils.MyPlane@,VRage.MyTriangle_Vertices@)">
            <summary>
            Method returns intersection point between sphere and triangle (which is defined by vertexes and plane).
            If no intersection found, method returns null.
            See below how intersection point can be calculated, because it's not so easy - for example sphere vs. triangle will 
            hardly generate just intersection point... more like intersection area or something.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetSphereTriangleIntersection(VRageMath.BoundingSphereD@,VRageMath.PlaneD@,VRage.MyTriangle_Vertices@)">
            <summary>
            Method returns intersection point between sphere and triangle (which is defined by vertexes and plane).
            If no intersection found, method returns null.
            See below how intersection point can be calculated, because it's not so easy - for example sphere vs. triangle will 
            hardly generate just intersection point... more like intersection area or something.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.CreateFolder(System.String)">
            <summary>
            Vytvori zadany adresar. Automaticky povytvara celu adresarovu strukturu, teda ak chcem vytvorit c:\volaco\opica
            a c:\volaco zatial neexistuje, tak tato metoda ho vytvori.
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:VRage.Utils.MyUtils.GenerateQuad(VRageMath.MyQuadD@,VRageMath.Vector3D@,System.Single,System.Single,VRageMath.MatrixD@)">
            <summary>
            Generate oriented quad by matrix
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetAngleBetweenVectors(VRageMath.Vector3,VRageMath.Vector3)">
            <summary>
            Calculating the Angle between two Vectors (return in radians).
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetBillboardQuadOriented(VRageMath.MyQuadD@,VRageMath.Vector3D@,System.Single,System.Single,VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            This billboard isn't facing the camera. It's always oriented in specified direction. May be used as thrusts, or inner light of reflector.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetLargestDistanceToSphere(VRageMath.Vector3D@,VRageMath.BoundingSphereD@)">
            <summary>
            Distance between "from" and opposite side of the "sphere". Always positive.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetLineBoundingBoxIntersection(VRageMath.Line@,VRageMath.BoundingBox@)">
            <summary>
            Calculates intersection between line and bounding box and if found, distance is returned. Otherwise null is returned.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetSmallestDistanceToSphere(VRageMath.Vector3D@,VRageMath.BoundingSphereD@)">
            <summary>
            Calculates distance from point 'from' to boundary of 'sphere'. If point is inside the sphere, distance will be negative.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetSpherePlaneIntersection(VRageMath.BoundingSphereD@,VRageMath.PlaneD@,System.Double@)">
            <summary>
            This tells if a sphere is BEHIND, in FRONT, or INTERSECTS a plane, also it's distance
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetSpherePlaneIntersection(VRageMath.BoundingSphereD@,VRage.Utils.MyPlane@,System.Single@)">
            <summary>
            This tells if a sphere is BEHIND, in FRONT, or INTERSECTS a plane, also it's distance
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.IsLineIntersectingBoundingSphere(VRageMath.LineD@,VRageMath.BoundingSphereD@)">
            <summary>
            Check intersection between line and bounding sphere
            We don't use BoundingSphere.Contains(Ray ...) because ray doesn't have an end, but line does, so we need
            to check if line really intersects the sphere.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.Normalize(VRageMath.Vector3)">
            <summary>
            Protected normalize with assert
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyUtils.Normalize(VRageMath.Vector3@,VRageMath.Vector3@)">
            <summary>
            Protected normalize with assert
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyUtils.Normalize(VRageMath.Matrix@,VRageMath.Matrix@)">
            <summary>
            Protected normalize with assert
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyUtils.Init``1(``0@)">
            <summary>
            When location is null, creates new instance, stores it in location and returns it.
            When location is not null, returns it.
            </summary>
        </member>
        <member name="F:VRage.Utils.MyUtils.DefaultNumberSuffix">
            <summary>
            Default number suffix, k = thousand, m = million, g/b = billion
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetCoordAligned(VRageMath.Vector2,VRageMath.Vector2,VRage.Utils.MyGuiDrawAlignEnum)">
            <summary>
            Aligns rectangle, works in screen/texture/pixel coordinates, not normalized coordinates.
            </summary>
            <returns>Pixel coordinates for texture.</returns>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetCoordAlignedFromCenter(VRageMath.Vector2,VRageMath.Vector2,VRage.Utils.MyGuiDrawAlignEnum)">
            <summary>
            Modifies input coordinate (in center) using alignment and
            size of the rectangle. Result is at position inside rectangle
            specified by alignment.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetCoordTopLeftFromAligned(VRageMath.Vector2,VRageMath.Vector2,VRage.Utils.MyGuiDrawAlignEnum)">
            <summary>
            Reverses effect of alignment to compute top-left corner coordinate.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetCoordTopLeftFromAligned(VRageMath.Vector2I,VRageMath.Vector2I,VRage.Utils.MyGuiDrawAlignEnum)">
            <summary>
            Reverses effect of alignment to compute top-left corner coordinate.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetCoordCenterFromAligned(VRageMath.Vector2,VRageMath.Vector2,VRage.Utils.MyGuiDrawAlignEnum)">
            <summary>
            Reverses effect of alignment to compute center coordinate.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetCoordAlignedFromRectangle(VRageMath.RectangleF@,VRage.Utils.MyGuiDrawAlignEnum)">
            <summary>
            Returns coordinate within given rectangle specified by draw align. Rectangle position should be
            upper left corner. Conversion assumes that Y coordinates increase downwards.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetRandomVector3">
            <summary>
            Returns a uniformly-distributed random vector from inside of a box (-1,-1,-1), (1, 1, 1)
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetRandomVector3D">
            <summary>
            Returns a uniformly-distributed random vector from inside of a box (-1,-1,-1), (1, 1, 1)
            </summary>
        </member>
        <member name="M:VRage.Utils.MyUtils.GetRandomTimeSpan(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns a random TimeSpan between begin (inclusive) and end (exclusive).
            </summary>
        </member>
        <member name="T:VRage.Utils.MyTimedItem`1">
            <summary>
            Item that is accessible only for defined time span.
            </summary>
            <typeparam name="T">item type</typeparam>
        </member>
        <member name="M:VRage.Utils.MyTimedItem`1.Get(System.Int32,System.Boolean)">
            <summary>
            Get the stored item.
            </summary>
            <param name="currentTime">Pass current time.</param>
            <param name="autoRefreshTimeout">Should the storage timeout be refreshed?</param>
            <returns>storage on success, default value of T on failure.</returns>
        </member>
        <member name="M:VRage.Utils.MyTimedItem`1.TryGet(System.Int32,System.Boolean,`0@)">
            <summary>
            Get the stored item.
            </summary>
            <param name="currentTime">Pass current time.</param>
            <param name="autoRefreshTimeout">Should the storage timeout be refreshed?</param>
            <param name="outStoredItem">item stored internally</param>
            <returns>true on success, false on timeout</returns>
        </member>
        <member name="M:VRage.Utils.MyTimedItem`1.Set(System.Int32,System.Int32,`0)">
            <summary>
            Set the stored value.
            </summary>
            <param name="currentTime">Pass current time.</param>
            <param name="itemTimeout">Period of time for which the item is accessible.</param>
            <param name="item">Item to be stored.</param>
        </member>
        <member name="T:VRage.Utils.MyTickTimedItem`1">
            <summary>
            Item that is accessible only for defined amount of time ticks.
            </summary>
            <typeparam name="T">item type</typeparam>
        </member>
        <member name="M:VRage.Utils.MyTickTimedItem`1.Get">
            <summary>
            Get the stored item.
            </summary>
            <returns>storage on success, default value of T on failure.</returns>
        </member>
        <member name="M:VRage.Utils.MyTickTimedItem`1.TryGet(`0@)">
            <summary>
            Get the stored item.
            </summary>
            <param name="outStoredItem">item stored internally</param>
            <returns>true on success, false on timeout</returns>
        </member>
        <member name="M:VRage.Utils.MyTickTimedItem`1.Set(System.Int32,`0)">
            <summary>
            Set the stored value.
            </summary>
            <param name="itemTickTimeout">Number of time ticks for which the item is accessible.</param>
            <param name="item">Item to be stored.</param>
        </member>
        <member name="T:VRage.Utils.MyTickTimedItemF">
            <summary>
            Item that is accessible only for defined amount of time ticks.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyTickTimedItemF.Get">
            <summary>
            Get the stored item.
            </summary>
            <returns>storage on success, default value of T on failure.</returns>
        </member>
        <member name="M:VRage.Utils.MyTickTimedItemF.TryGet(System.Single@)">
            <summary>
            Get the stored item.
            </summary>
            <param name="outStoredItem">item stored internally</param>
            <returns>true on success, false on timeout</returns>
        </member>
        <member name="M:VRage.Utils.MyTickTimedItemF.Set(System.Int32,System.Single)">
            <summary>
            Set the stored value.
            </summary>
            <param name="itemTickTimeout">Number of time ticks for which the item is accessible.</param>
            <param name="item">Item to be stored.</param>
        </member>
        <member name="T:VRage.Utils.MyTimedItemCache">
            <summary>
            Temporaly stores information about item (event/place) existence. This is useful if you want to launch some actions only from time to time.
            You ask timed cache whether your last event still takes effect.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyTimedItemCache.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="eventTimeoutMs">Time before </param>
        </member>
        <member name="M:VRage.Utils.MyTimedItemCache.IsItemPresent(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Generic item. Check whether generic item exists in the timed cache. 
            
            autoinsert param: If the item is not found, it is inserted to the cache if the argument autoinsert is true.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyTimedItemCache.IsPlaceUsed(VRageMath.Vector3D,System.Double,System.Int32,System.Boolean)">
            <summary>
            Helper function. Check temporal usage of space. Check whether the place is taken. Internally converts position to generic item.
            Please use consistent eventSpaceMapping, otherwise cache will not find your items.
            
            autoinsert param: If the item is not found, it is inserted to the cache if the argument autoinsert is true.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyStringHash">
            <summary>
            Generates string hashes deterministically and crashes on collisions. When used as key for hash tables (Dictionary or HashSet)
            always pass in MyStringHash.Comparer, otherwise lookups will allocate memory! Can be safely used in network but never serialize to disk!
            
            IDs are computed as hash from string so there is a risk of collisions. Use only when MyStringId is
            not sufficient (eg. sending over network). Because the odds of collision get higher the more hashes are in use, do not use this for
            generated strings and make sure hashes are computed deterministically (eg. at startup) and don't require lengthy gameplay. This way
            we know about any collision early and not from rare and random crash reports.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyStringHash.TryGet(System.Int32)">
            <summary>
            Think HARD before using this. Usually you should be able to use MyStringHash as it is without conversion to int.
            </summary>
        </member>
        <member name="M:VRage.Utils.MyExternalDebugStructures.ReadMessageFromPtr``1(VRage.Utils.MyExternalDebugStructures.CommonMsgHeader@,System.IntPtr,``0@)">
            <summary>
            Convert from raw data to message.
            Message must be struct with sequential layout having first field "Header" of type "CommonMsg".
            </summary>
        </member>
        <member name="T:VRage.Utils.MyStringId">
            <summary>
            Generates unique IDs for strings. When used as key for hash tables (Dictionary or HashSet)
            always pass in MyStringId.Comparer, otherwise lookups will allocate memory! Never serialize to network or disk!
            
            IDs are created sequentially as they get requested so two IDs might be different between sessions or clients and
            server. You can safely use ToString() as it will not allocate.
            </summary>
        </member>
        <member name="T:VRage.StructDefaultAttribute">
            <summary>
            Specifies a static read-only default value field for structs
            </summary>
        </member>
        <member name="T:VRage.Utils.MyVector3ISet">
            <summary>
            A data structure for a set of Vector3I coordinates optimized for sets with high spatial coherence (hence the name)
            </summary>
        </member>
        <member name="M:VRage.Utils.MyVector3ISet.Union(VRage.Utils.MyVector3ISet)">
            <summary>
            Makes a union of this set and the other set and saves it in this set
            </summary>
        </member>
        <member name="P:VRage.Utils.MyVector3ISet.Timestamp">
            <summary>
            For detection of modification of the set during iteration. Every modifying operation on the set should increase the timestamp
            </summary>
        </member>
        <member name="M:VRage.Utils.My5BitEncoding.#ctor">
            <summary>
            Initializes a new instance of the Encoding5Bit class.
            Uses characters 0-9 and A-Z except (0,O,1,I).
            </summary>
        </member>
        <member name="M:VRage.Utils.My5BitEncoding.#ctor(System.Char[])">
            <summary>
            Initializes a new instance of the Encoding5Bit class.
            </summary>
            <param name="characters">32 characters which will be used when encoding bytes to string.</param>
        </member>
        <member name="M:VRage.Utils.My5BitEncoding.Encode(System.Byte[])">
            <summary>
            Encodes data as 5bit string.
            </summary>
        </member>
        <member name="M:VRage.Utils.My5BitEncoding.Decode(System.Char[])">
            <summary>
            Decodes 5bit string as bytes, not alligned characters may be lost.
            Only decode strings encoded with Encode.
            </summary>
            <param name="encoded5BitText"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertRelease(System.Boolean)">
            <summary>
            This "assert" is executed in DEBUG and RELEASE modes. Use it in code that that won't suffer from more work (e.g. loading), not in frequently used loops
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertRelease(System.Boolean,System.String)">
            <summary>
            This "assert" is executed in DEBUG and RELEASE modes. Use it in code that that won't suffer from more work (e.g. loading), not in frequently used loops
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:VRage.Utils.MyDebug.FailRelease(System.String)">
            <summary>
            Logs the message on release and also displays a message on DEBUG.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertDebug(System.Boolean)">
            <summary>
            This "assert" is executed in DEBUG mode. Because people dont know how to use AssertRelease!
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertDebug(System.Boolean,System.String)">
            <summary>
            This "assert" is executed in DEBUG mode. Because people dont know how to use AssertRelease!
            </summary>
            <param name="condition"></param>
        </member>
        <member name="M:VRage.Utils.MyDebug.IsValid(System.Single)">
            <summary>
            Returns true if float is valid
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.IsValid(VRageMath.Vector3)">
            <summary>
            Returns true if Vector3 is valid
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.IsValid(VRageMath.Vector2)">
            <summary>
            Returns true if Vector2 is valid
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.IsValid(System.Nullable{VRageMath.Vector3})">
            <summary>
            Returns true if Vector3 is valid
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertIsValid(VRageMath.Vector3)">
            <summary>
            Returns true if Vector3 is valid
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertIsValid(System.Nullable{VRageMath.Vector3})">
            <summary>
            Returns true if Vector3 is valid
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertIsValid(VRageMath.Vector2)">
            <summary>
            Returns true if Vector2 is valid
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:VRage.Utils.MyDebug.AssertIsValid(System.Single)">
            <summary>
            Returns true if float is valid
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="T:VRage.Utils.MyEventSet">
            <summary>
            From http://www.wintellect.com/Resources CLR Via C# by Jeffrey Richter
            </summary>
        </member>
        <member name="T:VRage.Utils.MyMessageBox">
            <summary>
            Custom message box
            </summary>
        </member>
        <member name="M:VRage.Utils.MyEnumDuplicitiesTester.GetCompanyNameOfAssembly(System.Reflection.Assembly)">
            <summary>
            The company name of the calling assembly.
            </summary>
        </member>
        <member name="T:VRage.Utils.MyBBSetSampler">
            <summary>
            This class allows for uniform generation of points from a set of bounding boxes.
            
            You start by constructing a bounding box from where the points will be sampled.
            Then you can incrementally subtract bounding boxes and the resulting structure will allow you
            to generate uniformly distributed points using the Sample() function.
            </summary>
        </member>
        <member name="T:VRage.Profiler.ProfilerShort">
            <summary>
            Helper class, "shortcuts" to profiler
            </summary>
        </member>
        <member name="T:VRage.Voxels.MyVoxelRequestFlags">
            <summary>
            Flags used when requesting voxel materials and content.
            </summary>
            <remarks>
            These flags allow for optimizations such as avoiding
            expensive material computations or quickly assigning the
            whole storage the same material or content.
            </remarks>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.SurfaceMaterial">
            <summary>
            Materials are assigned only to surface (convention now is materials to be filled are 0, rest is left null (255)
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.ConsiderContent">
            <summary>
            Assign material according to content, i.e. null where empty
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.EmptyContent">
            <summary>
            Content is empty, materials are unassigned
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.FullContent">
            <summary>
            Content is full
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.OneMaterial">
            <summary>
            The whole assigned storage area contains a single material, the material is on the first cell
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.AdviseCache">
            <summary>
            cache storage chunks, this only works for lod0
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.ContentChecked">
            <summary>
            Storages that *do* support content hints will mark this, this is also the flag they should check when doing this optimization.
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.ContentCheckedDeep">
            <summary>
            When the content is empty or full this flag tells that the content is empty or full at all lower lod levels.
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.DoNotCheck">
            <summary>
            Do not check for containment beforehand, assume the caller expects content
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyVoxelRequestFlags.RequestFlags">
            <summary>
            Minimum flags to use when making requests
            </summary>
        </member>
        <member name="T:VRage.Voxels.OperationType">
            <summary>
            Type of voxel operation to perform
            </summary>
        </member>
        <member name="F:VRage.Voxels.OperationType.Fill">
            <summary>
            Fills in a range with voxels
            </summary>
        </member>
        <member name="F:VRage.Voxels.OperationType.Paint">
            <summary>
            Paints a range of voxels a different material
            </summary>
        </member>
        <member name="F:VRage.Voxels.OperationType.Cut">
            <summary>
            Cuts out a range of voxels
            </summary>
        </member>
        <member name="F:VRage.Voxels.MyCellCoord.Lod">
            <summary>
            0 is the most detailed.
            </summary>
        </member>
        <member name="M:VRage.Voxels.MyStorageData.Resize(VRageMath.Vector3I,VRageMath.Vector3I)">
            <param name="start">Inclusive.</param>
            <param name="end">Inclusive.</param>
        </member>
        <member name="P:VRage.Voxels.MyStorageData.StoreOcclusion">
            Wreather this storage data should keep occlusion values.
        </member>
        <member name="T:VRage.Voxels.MyVoxelCoordSystems">
            <summary>
            Functions for transforming to and from various coordinate systems in voxel maps and for computing bounding boxes of various types of cells.
            Note that local and world positions are (and should be) always in the min-corner!
            </summary>
            
            TODO: Review this whole class
            These are half wrong/ don't consider world matrix, beware
        </member>
    </members>
</doc>
